/**
 * This file was automatically generated by joi-to-typescript
 * Do not modify this file manually
 */

import { Run, NavigationEndpoint, Thumbnail, CommandMetadata, WebCommandMetadata, Badges, LongBylineText, ShortBylineText } from './shared';

export interface Accessibility {
  accessibilityData: AccessibilityData;
}

export interface AccessibilityData {
  label?: string;
}

export interface AccessibilityDataWithObject {
  accessibility?: Accessibility;
  runs?: Run[];
  simpleText?: string;
}

export interface AvatarViewModel {
  avatarImageSize: 'AVATAR_SIZE_M';
  image: {
    sources: {
      height: number;
      url: string;
      width: number;
    }[];
  };
}

export interface ChannelThumbnailWithLinkRenderer {
  channelThumbnailWithLinkRenderer: {
    accessibility?: object;
    navigationEndpoint: NavigationEndpoint;
    thumbnail: Thumbnail;
  };
}

export type DetailedMetadataSnippets = Snippet[];

export interface InlinePlaybackEndpoint {
  clickTrackingParams: string;
  commandMetadata: CommandMetadata;
  watchEndpoint: NavigationEndpoint;
}

export interface LengthText {
  accessibility: Accessibility;
  simpleText: string;
}

export interface MenuRenderer {
  menuRenderer: {
    accessibility?: object;
    items?: object[];
    trackingParams: string;
  };
}

export interface OwnerText {
  runs: Run[];
}

export interface PublishedTimeText {
  simpleText: string;
}

export interface Snippet {
  maxOneLine?: boolean;
  snippetHoverText: AccessibilityDataWithObject;
  snippetText: AccessibilityDataWithObject;
}

export interface Title {
  accessibility: Accessibility;
  runs: Run[];
}

export interface Video {
  avatar: {
    avatarViewModel?: AvatarViewModel;
    decoratedAvatarViewModel: {
      a11yLabel: string;
      avatar?: {
        avatarViewModel: AvatarViewModel;
      };
      rendererContext: {
        commandContext: {
          onTap: {
            innertubeCommand: {
              browseEndpoint: {
                browseId: string;
                canonicalBaseUrl?: string;
              };
              clickTrackingParams: string;
              commandMetadata: {
                apiUrl?: string;
                rootVe?: number;
                url?: string;
                webCommandMetadata?: WebCommandMetadata;
                webPageType?: string;
              };
            };
          };
        };
      };
    };
  };
  badges?: Badges;
  channelThumbnailSupportedRenderers: ChannelThumbnailWithLinkRenderer;
  detailedMetadataSnippets?: DetailedMetadataSnippets;
  expandableMetadata?: object;
  inlinePlaybackEndpoint?: InlinePlaybackEndpoint;
  lengthText?: LengthText;
  longBylineText: LongBylineText;
  menu: MenuRenderer;
  navigationEndpoint: NavigationEndpoint;
  ownerBadges?: Badges;
  ownerText: OwnerText;
  publishedTimeText?: PublishedTimeText;
  richThumbnail?: {
    movingThumbnailRenderer: object;
  };
  searchVideoResultEntityKey: string;
  shortBylineText: ShortBylineText;
  shortViewCountText: AccessibilityDataWithObject;
  showActionMenu: boolean;
  thumbnail: Thumbnail;
  thumbnailOverlays: object[];
  title: Title;
  trackingParams: string;
  videoId: string;
  viewCountText: ViewCountText;
}

export interface ViewCountText {
  runs?: Run[];
  simpleText?: string;
}
